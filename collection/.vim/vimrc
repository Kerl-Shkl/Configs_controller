filetype plugin indent on

"============plugins==============
call plug#begin('~/.vim/plugged')

Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'jiangmiao/auto-pairs'
Plug 'lervag/vimtex'
Plug 'ycm-core/YouCompleteMe'
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'ryanoasis/vim-devicons'
Plug 'SirVer/ultisnips'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'

Plug 'terryma/vim-smooth-scroll'
Plug 'romainl/vim-cool'

"Plug 'ervandew/supertab'

"============Colorscheme==========
Plug 'morhetz/gruvbox'
Plug 'doums/darcula'
"=================================

call plug#end()
"=================================

syntax enable
set number
set expandtab
set tabstop=4
set shiftwidth=4
set smartindent
set smarttab
set autoindent
set colorcolumn=80
highligh ColorColumn ctermbg=darkgray
set hlsearch
set incsearch
set wildmenu

set background=dark

" hotkey for :noh
nnoremap <silent> <C-l> :<C-u>nohlsearch<CR><C-l>

" visual star search
function! s:VSetSearch(cmdtype)
  let temp = @s
  norm! gv"sy
  let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
  let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

" navigation in buffer list
nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

"==============YCM================
imap <silent> <C-l> <Plug>(YCMToggleSignatureHelp)

let g:ycm_enable_semantic_highlighting=1
let g:ycm_enable_inlay_hints=0
"leg g:ycm_clear_inlay_hints_in_insert_mode=1
let g:ycm_enable_diagnostic_signs=1
"let g:ycm_echo_current_diagnostic = 'virtual-text'
hi link YcmInlayHint Comment
nnoremap <silent> <localleader>h <Plug>(YCMToggleInlayHints)

highlight YcmErrorLine guibg=#8fff00
let g:ycm_enable_diagnostic_highlighting = 0

let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
let g:SuperTabDefaultCompletionType = '<C-n>'

let g:ycm_semantic_triggers =  {
  \   'c': ['->', '.'],
  \   'objc': ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \            're!\[.*\]\s'],
  \   'ocaml': ['.', '#'],
  \   'cpp,cuda,objcpp': ['->', '.', '::'],
  \   'perl': ['->'],
  \   'php': ['->', '::'],
  \   'cs,d,elixir,go,groovy,java,javascript,julia,perl6,python,scala,typescript,vb': ['.'],
  \   'ruby,rust': ['.', '::'],
  \   'lua': ['.', ':'],
  \   'erlang': [':'],
  \ }

let g:ycm_autoclose_preview_window_after_completion=1
"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'

" diagnostic message shows in locationlist. For show full diagnostic you can
" press '<leader>d' and ':lopen' (for close ':close')
let g:ycm_always_populate_location_list=1

nmap <leader>yfw <Plug>(YCMFindSymbolInWorkspace)
nmap <leader>yfd <Plug>(YCMFindSymbolInDocument)

" GoTo
let g:ycm_goto_buffer_command = 'split-or-existing-window'
nnoremap <leader>jd :tab YcmCompleter GoTo<CR>
nnoremap <F4> :YcmCompleter GoToAlternateFile<CR>

" turn off identifier completer but keep sematnic triggers
"let g:ycm_min_num_of_chars_for_completion=99

" set blacklist for ycm. May be it is worth to add tex
"let g:ycm_filetype_blacklist = {
"    \ 'tagbar': 1,
"    \ 'notes': 1,
"    \ 'markdown': 1,
"    \ 'netrw': 1,
"    \ 'unite': 1,
"    \ 'text': 1,
"    \ 'vimwiki': 1,
"    \ 'pandoc': 1,
"    \ 'infolog': 1,
"    \ 'leaderf': 1,
"    \ 'mail': 1,
"    \}


let g:ycm_filetype_specific_completion_to_disable = {
    \ 'gitcommit': 1,
    \ 'tex': 1
    \}

let g:ycm_warning_symbol = '⚠'
let g:ycm_error_symbol = '⧯'

" hover - what popup when cursor hold - settings
nmap <leader>D <plug>(YCMHover)

let g:ycm_complete_in_comments = 1

let g:ycm_update_diagnostics_in_insert_mode = 1

"================================


"============NerdTree============

" Exit Vim if NERDTree is the only window remaining in the only tab.
map <C-n> :NERDTreeToggle<CR>
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

"================================

"Turn on gruvbox colorscheme
"autocmd vimenter * ++nested colorscheme gruvbox
colorscheme gruvbox
" colorscheme darcula
"

"=================Snippets================
let g:UltiSnipsSnippetDirectories=[$HOME.'/.vim/UltiSnips']
"let g:UltiSnipsExpandTrigger = "<tab>"
"let g:UltiSnipsJumpForwardTrigger = "<tab>"
"let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"

" UltiSnips triggering :
"  - ctrl-j to expand
"  - ctrl-j to go to next tabstop
"  - ctrl-k to go to previous tabstop
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
"=========================================


"=================Folding=================
"set foldmethod=syntax
"set nofoldenable
set foldmethod=syntax   
set foldnestmax=10
set nofoldenable
set foldlevel=2
"=========================================

"===============Smooth_scroll=============
noremap <silent> <c-u> :call smooth_scroll#up(&scroll, 10, 2)<CR>
noremap <silent> <c-d> :call smooth_scroll#down(&scroll, 10, 2)<CR>
noremap <silent> <c-b> :call smooth_scroll#up(&scroll*2, 10, 4)<CR>
noremap <silent> <c-f> :call smooth_scroll#down(&scroll*2, 10, 4)<CR>
"=========================================


"=================vim cool===============
"auto :noh
let g:cool_total_matches = 1
"=========================================
 
